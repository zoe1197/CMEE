while (length(thetas) <= N) {
# 1. draw from prior (continuous, bounded, uniform)
theta <- runif(1,0,20)
# 2. simulate observations
ysim <- simulateElephants(theta)
# 3. accept/reject
if (ysim == y) thetas <- c(thetas, theta)
}
source('~/Documents/Term_2/BayesianStat/Notebooks/Code/Thursday.R', echo=TRUE)
source('~/Documents/Term_2/BayesianStat/Notebooks/Code/Thursday.R', echo=TRUE)
# function to simulate is called "simulateElephants"
thetas <- c()
while (length(thetas) <= N) {
browser()
# 1. draw from prior (continuous, bounded, uniform)
theta <- runif(1,0,20)
# 2. simulate observations
ysim <- simulateElephants(theta)
# 3. accept/reject
if (ysim == y) thetas <- c(thetas, theta)
}
ysim == y
ysim == y
thetas
runif(1,0,20)
source('~/Documents/Term_2/BayesianStat/Notebooks/Code/Thursday.R', echo=TRUE)
source('~/Documents/Term_2/BayesianStat/Notebooks/Code/Thursday.R', echo=TRUE)
q
source('~/Documents/Term_2/BayesianStat/Notebooks/Code/Thursday.R', echo=TRUE)
hist(thetas)
################ example2 ################
source("../Data/abc.R")
# Rejection algorithm in the continuous case
N <- 1e3
y <- 91.3514
epsilon <- 3 # 1e-1
# euclidean distance
rho <- function(x,y) sqrt((x-y)^2)
thetas <- c()
while (length(thetas) <= N) {
# 1. draw from prior (continuous, bounded, uniform)
theta <- runif(1, min=80, max=110)
# 2. simulate observations
ysim <- simulateWaterTemp(theta)
# 3. accept/reject
if (rho(ysim,y)<=epsilon) thetas <- c(thetas, theta)
}
print(mean(thetas))
print(var(thetas))
hist(thetas)
quantile(thetas, c(0.025,0.25,0.5,0.75,0.975))
epsilon <- 1e-1
# euclidean distance
rho <- function(x,y) sqrt((x-y)^2)
thetas <- c()
while (length(thetas) <= N) {
# 1. draw from prior (continuous, bounded, uniform)
theta <- runif(1, min=80, max=110)
# 2. simulate observations
ysim <- simulateWaterTemp(theta)
# 3. accept/reject
if (rho(ysim,y)<=epsilon) thetas <- c(thetas, theta)
}
print(mean(thetas))
print(var(thetas))
hist(thetas)
quantile(thetas, c(0.025,0.25,0.5,0.75,0.975))
################# practice #################
source("Data/abc.R")
################# practice #################
source("../Data/abc.R")
# Rejection algorithm with proportions of simulations to accept
N <- 1e4
Y <- c(91.34, 89.21, 88.98)
th <- 0.05
# function to simulate is called "simulateWaterTemp"
source("Data/abc.R")
theta <- rnorm(1, mean = 90, lower =80, higher=110)
library(coda)
# 5%
HPDinterval(as.mcmc(dis), prob=0.95)
################# practice #################
source("../Data/abc.R")
# Rejection algorithm with proportions of simulations to accept
N <- 1e4
Y <- c(91.34, 89.21, 88.98)
th <- 0.05
# distance function
distance <- function(x,Y){
dis <- c()
for (y in Y) {
dis <- c(dis, sqrt((x-y)^2))
}
return(mean(dis))
}
# function to simulate is called "simulateWaterTemp"
thetas <- c()
dis <- c()
while (length(thetas) <= N) {
# 1. draw from prior (continuous, bounded, uniform)
theta <- runif(1, min=80, max=110)
# 2. simulate observations
ysim <- simulateWaterTemp(theta)
# 3. calculate the distance
dis <- c(dis, distance(ysim, Y))
}
# 5%
HPDinterval(as.mcmc(dis), prob=0.95)
theta <- rnorm(n = 1,mean = 90)
rnorm(n = 1,mean = 90)
################# practice #################
source("../Data/abc.R")
# Rejection algorithm with proportions of simulations to accept
N <- 1e4
Y <- c(91.34, 89.21, 88.98)
th <- 0.05
# distance function
rho <- function(x, y){
sum(sqrt((x-y)^2)) / length(y)
}
# function to simulate is called "simulateWaterTemp"
thetas <- dis <- c()
while (length(thetas) <= N) {
# 1. draw from prior (continuous, bounded, normal)
theta <- 0
while (theta < 80 | theta > 110) {
theat <- rnorm(1, mean = 90, sd = sqrt(20))
}
thetas <- c(thetas, theta)
# 2. simulate observations
ysim <- simulateWaterTemp(theta)
# 3. calculate the distance
dis <- c(dis, rho(ysim, Y))
}
# prior / parameter
hist(thetas)
quantile(thetas)
# relationship between parameter and distance
head(cbind(thetas, dis))
# distance
hist(distance)
################# practice #################
source("../Data/abc.R")
# Rejection algorithm with proportions of simulations to accept
N <- 1e4
Y <- c(91.34, 89.21, 88.98)
th <- 0.05
# distance function
rho <- function(x, y){
sum(sqrt((x-y)^2)) / length(y)
}
# function to simulate is called "simulateWaterTemp"
thetas <- dis <- c()
while (length(thetas) <= N) {
# 1. draw from prior (continuous, bounded, normal)
theta <- 0
while (theta < 80 | theta > 110) {
theat <- rnorm(1, mean = 90, sd = sqrt(20))
}
thetas <- c(thetas, theta)
# 2. simulate observations
ysim <- simulateWaterTemp(theta)
# 3. calculate the distance
dis <- c(dis, rho(ysim, Y))
}
# distance
hist(dis)
# function to simulate is called "simulateWaterTemp"
thetas <- dis <- c()
for (i in 1:N) {
# 1. draw from prior (continuous, bounded, normal)
theta <- 0
while (theta < 80 | theta > 110) {
theat <- rnorm(1, mean = 90, sd = sqrt(20))
}
thetas <- c(thetas, theta)
# 2. simulate observations
ysim <- simulateWaterTemp(theta)
# 3. calculate the distance
dis <- c(dis, rho(ysim, Y))
}
rho(ysim, Y)
################# practice #################
source("../Data/abc.R")
# Rejection algorithm with proportions of simulations to accept
N <- 1e4
Y <- c(91.34, 89.21, 88.98)
th <- 0.05
# distance function
rho <- function(x, y){
sum(sqrt((x-y)^2)) / length(y)
}
# function to simulate is called "simulateWaterTemp"
thetas <- dis <- c()
rm(list = ls())
################# practice #################
source("../Data/abc.R")
# Rejection algorithm with proportions of simulations to accept
N <- 1e4
Y <- c(91.34, 89.21, 88.98)
th <- 0.05
# distance function
rho <- function(x, y){
sum(sqrt((x-y)^2)) / length(y)
}
# function to simulate is called "simulateWaterTemp"
thetas <- dis <- c()
for (i in 1:N) {
# 1. draw from prior (continuous, bounded, normal)
theta <- 0
while (theta < 80 | theta > 110) {
theat <- rnorm(1, mean = 90, sd = sqrt(20))
}
thetas <- c(thetas, theta)
# 2. simulate observations
ysim <- simulateWaterTemp(theta)
# 3. calculate the distance
dis <- c(dis, rho(ysim, Y))
}
# relationship between paremeters and distance
head(cbind(thetas, dis))
################# practice #################
source("../Data/abc.R")
# Rejection algorithm with proportions of simulations to accept
N <- 1e4
Y <- c(91.34, 89.21, 88.98)
th <- 0.05
# distance function
rho <- function(x, y){
sum(sqrt((x-y)^2)) / length(y)
}
# function to simulate is called "simulateWaterTemp"
thetas <- dis <- c()
for (i in 1:N) {
# 1. draw from prior (continuous, bounded, normal)
theta <- 0
while (theta < 80 | theta > 110) {
theta <- rnorm(1, mean = 90, sd = sqrt(20))
}
thetas <- c(thetas, theta)
# 2. simulate observations
ysim <- simulateWaterTemp(theta)
# 3. calculate the distance
dis <- c(dis, rho(ysim, Y))
}
# prior / parameter
hist(thetas)
quantile(thetas)
# relationship between paremeter and distance
head(cbind(thetas, dis))
# distance
hist(dis)
rank(dis, ties.method = 'random') / length(dis)<= th
rank(dis, ties.method = 'random')
length(dis)
rank(dis, ties.method = 'random')
range(dis[accept])
accept <- which(rank(dis, ties.method = 'random') / length(dis) <= th)
range(dis[accept])
rank(dis, ties.method = 'random') / length(dis) <= th
abline(v = max(dis[accept]), lty = 2)
rm(list = ls())
graphics.off()
rm(list = ls())
# load functions
source("../Data/functions.R")
load("../Data/polar.brown.sfs.Rdata")
# Inspect the objects
ls()
View(polar.brown.sfs)
View(plot2DSFS)
View(polar.brown.sfs)
# plot the spectrum
plot2DSFS(polar.brown.sfs, xlab = "Polar", ylab = "Brown", main = "2D-SFS")
plot2DSFS
# plot the spectrum
plot2DSFS(polar.brown.sfs, xlab = "Polar", ylab = "Brown", main = "2D-SFS")
View(polar.brown.sfs)
plot2DSFS(sfs = polar.brown.sfs, xlab = 'Polar', ylab = 'Brown', main = '2D-SFS')
# plot the spectrum
plot2DSFS(sfs = polar.brown.sfs, xlab = 'Polar', ylab = 'Brown', main = '2D-SFS')
View(plot2DSFS)
graphics.off()
# plot the spectrum
plot2DSFS(sfs = polar.brown.sfs, xlab = 'Polar', ylab = 'Brown', main = '2D-SFS')
