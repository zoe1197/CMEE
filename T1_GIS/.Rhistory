traits <- read.csv("data/bird_traits.csv", stringsAsFactors = FALSE)
View(traits)
?View
?sample_lsm
sites_forest_utm23S <- projectRaster(sites_forest, crs="+init=epsg:32723", method='ngb')
quit()
sites_utm23S <- st_transform(sites, 32723)
sites_forest_utm23S <- projectRaster(sites_forest, crs="+init=epsg:32723", method='ngb')
library(raster)
library(sf)
library(landscapemetrics)
library(vegan)
sites <- read.csv("data/sites.csv", header = TRUE)
sites <- st_as_sf(sites, coords=c('Lon','Lat'), crs=4326)
plot(sites[c('Landscape_ID')], key.pos=4)
landcover <- raster("data/map.tif")
print(landcover)
sites_region <- st_as_sfc(st_bbox(sites))
# Buffer the region by 0.1 degrees to get coverage around the
# - this throws out a warning, but this is only a rough border.
sites_region <- st_buffer(sites_region, 0.1)
# Convert to a `sp` extent object for use in `crop`
sites_extent <- extent(matrix(st_bbox(sites_region), ncol=2))
# Crop the landcover data and convert to a binary forest map
sites_landcover <- crop(landcover, sites_extent)
sites_forest <- sites_landcover == 3
print(sites_forest)
sites_utm23S <- st_transform(sites, 32723)
sites_forest_utm23S <- projectRaster(sites_forest, crs="+init=epsg:32723", method='ngb')
plot(sites_forest_utm23S)
plot(st_geometry(sites_utm23S), add=TRUE)
plot(sites_forest_utm23S)
plot(st_geometry(sites_utm23S), add=TRUE)
plot.new()
plot(sites_forest_utm23S)
plot(st_geometry(sites_utm23S), add=TRUE)
plot(sites_forest_utm23S)
plot(st_geometry(sites_utm23S), add=TRUE)
sites_forest_utm23S
plot(sites_forest_utm23S)
plot(st_geometry(sites_utm23S), add=TRUE)
par('mar')
par(mar=c(1,1,1,1))
plot(sites_forest_utm23S)
plot(st_geometry(sites_utm23S), add=TRUE)
lsm <- sample_lsm(sites_forest_utm23S, sites_utm23S,
shape = "circle", size = 600,
plot_id = sites_utm23S$Site,
what = c("lsm_l_np", 'lsm_l_ed', 'lsm_c_pland'))
print(lsm)
lsm <- subset(lsm, class == 1 | is.na(class), select=c(metric, value, plot_id))
# Reshape that dataset so that each metric has its own column
lsm <- reshape(data.frame(lsm), direction='wide', timevar='metric', idvar='plot_id')
print(lsm)
sites <- merge(sites, lsm, by.x='Site', by.y='plot.id')
sites <- merge(sites, lsm, by.x='Site', by.y='plot_id')
sites
View(sites)
View(traits)
traits <- read.csv("data/bird_traits.csv", stringsAsFactors = FALSE)
View(traits)
summary(traits)
names(traits)
summary(sites)
summary(abundance)
abundance <- read.csv("data/abundance.csv", stringsAsFactors = FALSE)
summary(abundance)
summary(traits)
summary(traits, NA=TRUE)
?summary
table(is.na(abundance))
table(is.na(sites))
table(is.na(traits)
)
any(is.na(abundance))
table(colSums(abundance))
table(colSums(abundance[, 1]))
str(abundance)
table(colSums(abundance[, - 1]))
hist(colSums(abundance[, - 1]))
bray  <- vegdist(abundance, method="bray", binary=FALSE)
abundance <- read.csv("data/abundance.csv", row.names=1, stringsAsFactors = FALSE)
table(colSums(abundance))
bray  <- vegdist(abundance, method="bray", binary=FALSE)
pcoa <- cmdscale(bray, eig=TRUE)
str(pcoa)
pco1 <- pcoa$points[,1]
pco2 <- pcoa$points[,2]
plot(pco1,pco2, pch=as.character(sites$Percent))
round(pcoa$eig, 4)
barplot(pcoa$eig /sum(pcoa$eig))
barplot(pcoa$eig)
plot(pcoa$eig)
plot(pcoa$eig, type='l')
abline(h=0, col='red')
plot(cumsum(pcoa$eig), type='l')
plot(cumsum(pcoa$eig), type='l', y)
vegdist(cbind(pco1,pco2), method="euc", binary=FALSE)
Euc.pcoa  <- vegdist(cbind(pco1,pco2), method="euc", binary=FALSE)
plot(Euc.pcoa, bray)
pcoa <- cmdscale(bray, eig=TRUE)
pcoa <- cmdscale(bray, eig=TRUE, k=9)
pco1 == pcoa$points[,1]
all(pco1 == pcoa$points[,1])
all(pco2 == pcoa$points[,2])
pp <- data.frame(pcoa$points)
str(pp)
pp$Site <- names(pp)
pp$Site <- rownames(pp)
str(pp)
str(pp)
sites_pcoa <- merge(sites, pcoa_axes, by='Site')
# Extract the scores
pcoa_axes <- data.frame(pcoa$points)
# Label by site
pcoa_axes$Site <- rownames(pcoa_axes)
# Merge onto the sites data
sites_pcoa <- merge(sites, pcoa_axes, by='Site')
sites_pcoa
cor(pcoa_points)
cor(pcoa_axes)
cor(pcoa_axes[,-1])
pcoa_axes
cor(pcoa_axes[,-9])
cor(pcoa_axes[,-8])
pcoa_axes <- data.frame(pcoa$points)
cor(pcoa_axes)
zapsmall(cor(pcoa_axes))
?zapsmall
zapsmall(cor(pcoa_axes), digits=10)
zapsmall(cor(pcoa_axes), digits=10)
10^-9
plot(X2 ~ X1, data=sites_pcoa)
plot(X2 ~ X1, data=sites_pcoa, col=Percent)
plot(X2 ~ X1, data=sites_pcoa, col=value.pland)
plot(X2 ~ X1, data=sites_pcoa, col=as.factor(Percent))
plot(Percent ~ value.pland, data=sites_pcoa)
plot(X2 ~ X1, data=sites_pcoa, col=value.pland)
plot(X2 ~ X1, data=sites_pcoa, col=value.pland, breaks=seq(0,1,by=0.1)), col=hcl.colors(10))
plot(X2 ~ X1, data=sites_pcoa, col=value.pland, breaks=seq(0,1,by=0.1), col=hcl.colors(10))
plot(X2 ~ X1, data=sites_pcoa, breaks=seq(0,1,by=0.1)), col=hcl.colors(10))
plot(X2 ~ X1, data=sites_pcoa, breaks=seq(0,1,by=0.1), col=hcl.colors(10))
breaks <- seq(0, 1, by=0.05)
cols <- hcl.colors(20)
sites_pcoa$pland.col <- cols[findInterval(sites_pcoa, breaks)]
# The axes get the labels X1 to X8
plot(X2 ~ X1, data=sites_pcoa, col=pland.col)
breaks <- seq(0, 1, by=0.05)
cols <- hcl.colors(20)
sites_pcoa$pland.col <- cols[findInterval(sites_pcoa$value.pland, breaks)]
# The axes get the labels X1 to X8
plot(X2 ~ X1, data=sites_pcoa, col=pland.col)
sites_pcoa
breaks <- seq(0, 100, by=5)
cols <- hcl.colors(20)
sites_pcoa$pland.col <- cols[findInterval(sites_pcoa$value.pland, breaks)]
# The axes get the labels X1 to X8
plot(X2 ~ X1, data=sites_pcoa, col=pland.col)
breaks <- seq(0, 100, by=5)
cols <- hcl.colors(20, pal='Red-Blue')
sites_pcoa$pland.col <- cols[findInterval(sites_pcoa$value.pland, breaks)]
# The axes get the labels X1 to X8
plot(X2 ~ X1, data=sites_pcoa, col=pland.col)
hist(sites_pcoa$value.pland)
range(sites_pcoa$value.pland)
sites_pcoa
?findInterval
# Create a colour scheme for percentage forest cover
breaks <- seq(0, 100, by=5)
cols <- hcl.colors(20, pal='Red-Blue')
sites_pcoa$pland.col <- cols[findInterval(sites_pcoa$value.pland, breaks, rightmost.closed=FALSE)]
# The axes get the labels X1 to X8
plot(X2 ~ X1, data=sites_pcoa, col=pland.col)
# Create a colour scheme for percentage forest cover
breaks <- seq(0, 100, by=5)
cols <- hcl.colors(20)
sites_pcoa$pland.col <- cols[findInterval(sites_pcoa$value.pland, breaks, rightmost.closed=FALSE)]
# The axes get the labels X1 to X8
plot(X2 ~ X1, data=sites_pcoa, col=pland.col)
plot(X2 ~ X1, data=sites_pcoa, col=pland.col, pch=20)
legend_vals <- c(1,6,11,16,21)
legend('topleft', col=cols[legend_vals], labels=breaks[legend_vals])
?legend
legend('topleft', col=cols[legend_vals], legend=breaks[legend_vals])
legend('topleft', col=cols[legend_vals], legend=breaks[legend_vals], pch=20)
??scale
library(ggplot2)
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)))
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland))
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland, pal='viridis'))
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland, palette='viridis'))
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland, palette='viridis') + scale_colour_viridis_d())
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland, palette='viridis')) + scale_colour_viridis_d()
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)) + scale_colour_viridis_d()
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)) + scale_colour_viridis()
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)) + scale_colour_gradient(hcl.colors)
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)) + scale_colour_gradientn(hcl.colors(20))
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)) + scale_colour_gradientn(colors=hcl.colors(20))
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)) +
scale_colour_gradientn(colors=hcl.colors(20)) +
theme_bw()
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)) +
scale_colour_gradientn(colors=hcl.colors(20)) +
theme_minimal()
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)) +
scale_colour_gradientn(colors=hcl.colors(20)) +
theme_bw()
ggplot(sites_pcoa, aes(X1, X2)) +
geom_point(aes(colour = value.pland)) +
scale_colour_gradientn(colors=hcl.colors(20)) +
theme_classic()
ggplot(sites_pcoa, aes(X1, X3)) +
geom_point(aes(colour = value.pland)) +
scale_colour_gradientn(colors=hcl.colors(20)) +
theme_classic()
ggplot(sites_pcoa, aes(X2, X3)) +
geom_point(aes(colour = value.pland)) +
scale_colour_gradientn(colors=hcl.colors(20)) +
theme_classic()
ggplot(sites_pcoa, aes(X1, X4)) +
geom_point(aes(colour = value.pland)) +
scale_colour_gradientn(colors=hcl.colors(20)) +
theme_classic()
par(mfrow=c(1,2))
barplot(pcoa$eig)
barplot(cumsum(pcoa$eig))
par(mfrow=c(1,2))
barplot(pcoa$eig / sum(pcoa$eig))
barplot(cumsum(pcoa$eig)/ sum(pcoa$eig))
par(mfrow=c(1,2))
eig <- pcoa$eig[pcoa$eig >0]
barplot(eig / sum(eig), main='Axis variation')
barplot(cumsum(eig)/ sum(eig), main='Cumulative variation')
par(mfrow=c(1,2))
eig <- pcoa$eig[pcoa$eig >0]
barplot(eig / sum(eig), main='Axis variation')
barplot(cumsum(eig)/ sum(eig), main='Cumulative variation')
par(mar=c(4,4,1,1,))
par(mar=c(4,4,1,1)
)
par(mfrow=c(1,2))
eig <- pcoa$eig[pcoa$eig >0]
barplot(eig / sum(eig), main='Axis variation')
barplot(cumsum(eig)/ sum(eig), main='Cumulative variation')
pcoa_axes
xx <- vegdist(pcoa_axes, method="euc", binary=FALSE)
plot(xx, bray)
xx <- vegdist(pcoa_axes[, 1:2], method="euc", binary=FALSE)
plot(xx, bray)
par(mfrow=c(1,2))
plot(shepard_8, bray, main='First 8 axes')
plot(shepard_2, bray, main='First 2 axes')
shepard_8  <- vegdist(pcoa_axes, method="euc", binary=FALSE)
# Use just the first 2
shepard_2  <- vegdist(pcoa_axes[, c(1,2)], method="euc", binary=FALSE)
par(mfrow=c(1,2))
plot(shepard_8, bray, main='First 8 axes')
plot(shepard_2, bray, main='First 2 axes')
hexbinplot(shepard_8, bray, main='First 8 axes')
library(hexbin)
install.packages(hexbin)
install.packages('hexbin')
hexbinplot(shepard_8, bray, main='First 8 axes')
library(hexbin)
hexbinplot(shepard_8, bray, main='First 8 axes')
hexbinplot(shepard_8 ~bray, main='First 8 axes')
hexbinplot(shepard_8 ~bray, main='First 8 axes'. legend=FALSE)
hexbinplot(shepard_8 ~bray, main='First 8 axes', legend=FALSE)
hexbin(shepard_8 ~bray, main='First 8 axes', legend=FALSE)
?hexbinplot
gplot.hexbin(hexbin(shepard_8, bray))
gplot.hexbin(hexbin(shepard_8, bray), legend=FALSE)
par(mfrow=c(1,2))
gplot.hexbin(hexbin(shepard_8, bray), legend=FALSE)
colSums(abundance)
traits
str(traits)
whichMax(colSums(abundance))
which_max(colSums(abundance))
which.max(colSums(abundance))
sites_pcoa
mod_600 <- lm(X1 ~ value.pland, data=sites_pcoa)
summary(mod_600)
mod_600 <- lm(X1 ~ value.pland, data=sites_pcoa)
summary(mod_600)
plot(X1 ~ value.pland, data=sites_pcoa)
abline(mod_600, col='red'
)
lsm <- sample_lsm(sites_forest_utm23S, sites_utm23S,
shape = "circle", size = 600,
plot_id = sites_utm23S$Site,
what = c("lsm_c_area_cv", "lsm_l_area_cv"))
lsm
lsm <- sample_lsm(sites_forest_utm23S, sites_utm23S,
shape = "circle", size = 600,
plot_id = sites_utm23S$Site,
what = c("lsm_c_np", "lsm_l_np"))
lsm
lsm <- sample_lsm(sites_forest_utm23S, sites_utm23S,
shape = "circle", size = 600,
plot_id = sites_utm23S$Site,
what = c('lsm_c_np', 'lsm_l_np',
'lsm_c_area_mn', 'lsm_l_area_mn'))
lsm
subset(lsm, Site=='Alce')
subset(lsm, plot_id=='Alce')
lsm <- sample_lsm(sites_forest_utm23S, sites_utm23S,
shape = "circle", size = 600,
plot_id = sites_utm23S$Site,
what = c('lsm_p_area',
'lsm_c_np', 'lsm_l_np',
'lsm_c_area_mn', 'lsm_l_area_mn'))
subset(lsm, Site=='Alce')
subset(lsm, plot_id=='Alce')
x <- subset(lsm, plot_id=='Alce')
sum(x$value[x$level == 'patch'])
pi * 600 ^2
pi * 600 ^2 * 101
lsm <- sample_lsm(sites_forest_utm23S, sites_utm23S,
shape = "circle", size = 800,
plot_id = sites_utm23S$Site,
what = c('lsm_p_area',
'lsm_c_np', 'lsm_l_np',
'lsm_c_area_mn', 'lsm_l_area_mn'))
subset(lsm, plot_id=='Alce')
x <- subset(lsm, plot_id=='Alce')
x
sum(x$value[x$level == 'patch'])
pi * 800 ^2 * 101
pi * 800 ^2
lsm <- sample_lsm(sites_forest_utm23S, sites_utm23S,
shape = "circle", size = 600,
plot_id = sites_utm23S$Site,
what = c('lsm_p_area',
'lsm_c_np', 'lsm_l_np',
'lsm_c_area_mn', 'lsm_l_area_mn'))
alce <- subset(lsm, plot_id=='Alce')
print(alce)
sum(alce$value[alce$level == 'patch'])
sum(alce$value[alce$metric == 'area'])
sum(alce$value[alce$metric == 'area'])
lsm <- reshape(data.frame(lsm), direction='wide', timevar='metric', idvar='plot_id')
lsm
lsm <- sample_lsm(sites_forest_utm23S, sites_utm23S,
shape = "circle", size = 600,
plot_id = sites_utm23S$Site,
what = c('lsm_p_area',
'lsm_c_np', 'lsm_l_np',
'lsm_c_area_mn', 'lsm_l_area_mn'))
lsm_forest <- subset(lsm, class == 1 | is.na(class), select=c(metric, value, plot_id))
lsm_forest
lsm_forest <- reshape(data.frame(lsm_forest), direction='wide', timevar='metric', idvar='plot_id')
lsm_forest
lsm_forest <- reshape(data.frame(lsm_forest), direction='wide', timevar='metric', idvar='plot_id', v.names='conc')
lsm_forest <- reshape(data.frame(lsm_forest), direction='wide', idvar='plot_id', v.names='metrix')
lsm_forest <- reshape(data.frame(lsm_forest), direction='wide', idvar='plot_id', v.names='metric')
head(lsm_forest)
lsm_forest <- subset(lsm, class == 1 | is.na(class), select=c(metric, value, plot_id))
lsm_forest <- reshape(data.frame(lsm_forest), direction='wide', idvar='plot_id', v.names='metric')
head(lsm_forest)
lsm_forest <- reshape(data.frame(lsm_forest), direction='wide', timevar='metric', idvar='plot_id')
head(lsm_forest)
lsm_forest <- subset(lsm, level != 'patch')
lsm_forest
lsm_forest <- subset(lsm, level == 'class')
lsm_forest <- subset(lsm_forest, class == 1, select=c(metric, value, plot_id))
lsm_forest
names(lsm_forest)
names(lsm_forest)[2] <- 'C600'
names(lsm_forest)
lsm_forest <- reshape(data.frame(lsm_forest), direction='wide',
timevar='metric', idvar='plot_id')
head(lsm_forest)
sites <- merge(sites, lsm_forest, by.x='Site', by.y='plot_id')
sites
bray
ggplot(bray)
ggplot(as.matrix(bray))
quit()
