getwd()
setwd(~/Documents)
############# Exploring the data (extend the script below)  ###############
# tidyverse
# install.packages(c("tidyverse"))
# sudo apt install r-cran-tidyverse
require(tidyverse)
warnings()
install.packages("tidyverse")
require(tidyverse)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
############# Exploring the data (extend the script below)  ###############
# tidyverse
# !!!!!!!!!!!!!!!!!!!!!!!!!
# install.packages(c("tidyverse"))
# sudo apt install r-cran-tidyverse
require(tidyverse)
# list the package to if there are some name-conflict-masking messages
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well
install.packages("raster", "sf", "sp", "rgeos", "rgdal", "lwgeom")
install.packages("raster", "sp", "rgeos", "rgdal", "lwgeom")
install.packages("raster" "sf" "sp" "rgeos" "rgdal" "lwgeom")
install.packages("raster")
require(raster)
install.packages('raster')
install.packages('sf')
require(raster)
require(sf)
install.packages('sf')
install.packages('sp')
install.packages("sp")
install.packages('sf') # Core vector GIS data package
install.packages('rgeos') # Extends vector data functionality
install.packages('rgdal') # Interface to the Geospatial Data Abstraction Library
install.packages('lwgeom') # Extends vector data functionality
library(rgdal)
library(raster)
library(sf)
library(sp)
library(units)
install.packages('raster') # Core raster GIS data package
install.packages('sf') # Core vector GIS data package
install.packages('raster') # Core raster GIS data package
install.packages('sf') # Core vector GIS data package
install.packages('sp') # Another core vector GIS package
install.packages('rgeos') # Extends vector data functionality
install.packages('rgdal') # Interface to the Geospatial Data Abstraction Library
install.packages('lwgeom') # Extends vector data functionality
library(rgdal)
library(raster)
library(sf)
library(sp)
library(units)
install.packages('rgeos')
install.packages('rgeos')
require(rgeos)
install.packages('rgdal')
install.packages('rgdal')
require(rgdal)
install.packages('lwgeom')
devtools::install_github("r-spatial/lwgeom")
install.packages('lwgeom')
install.packages('sf')
install.packages('lwgeom')
rm(list = ls())
View(result)
require(doParallel)
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
sim_genetic_drive <- function(q0, d, t, N0, R0, M){
if(q0 <= 0 || q0 >0.5){
stop('make sure 0<q0<0.5')
}
if(d<=0.5 || d>1){
stop('make sure 0.5<d<1')
}
bh <- function(N, R0, M){
return(ceiling(R0*N/(1+N/M)))
}
count_genotype <- function(x){
temp <- apply(x, 2, sum)
return(c(sum(temp==0),sum(temp==1), sum(temp==2)))
}
population <- list()
length(population) <- (t+1)
population.size <- rep(NA, t+1)
TG.freq <- rep(NA, t+1)
population.size[1] <- N0
TG.freq[1] <- q0
k <- ceiling(2*N0*q0)
population[[1]] <- cbind(matrix(c(0,0), nrow = 2, ncol = N0-k), matrix(c(0,1), nrow = 2, ncol = k))
genotype <- count_genotype(population[[1]])
for (i in t) {
population.size[[i+1]] <- bh(genotype[1]+genotype[2], R0, M)
if(population.size[i+1]<=1){
print(paste0('Population crashed after generation ', i))
return(list(population[1:i], population.size[1:i], TG.freq[1:i]))
}
if(genotype[2]+genotype[3]==0){
print(paste0('TG allele went extinct after generation ', i))
return(list(population[1:i], population.size[1:i], TG.freq[1:i]))
}
TG.gametic.freq <- d*genotype[2]/(genotype[1]+genotype[2])
# sample the next generation
population[[i+1]] <- matrix(
sample(0:1, size = 2*population.size[i+1],
prob = c(1-TG.gametic.freq, TG.gametic.freq), replace = TRUE),
nrow=2)
# calculate new genotype counts and TG frequency
genotype <- count_genotype(population[[i+1]])
TG.freq[i+1] <- (0.5*genotype[2]+genotype[3]) / population.size[i+1]
}
return(list(population=population, population.size= population.size, TG.freq=TG.freq))
}
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(mean(data$population_size), var(data$population_size))
}
result
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(list(mean(data$population_size), var(data$population_size)))
}
result
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(mean(data$population_size))
}
result
stopCluster()
result
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(mean(data))
}
stopCluster()
result
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
return(mean(data))
}
stopCluster()
result
sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
return()
}
stopCluster()
result
rm(list = ls())
require(doParallel)
# define the beverton-holt model funciton
BH_model <- function(N, R0, M){
return(ceiling(R0*N/(1+N/M)))
}
# define the function to count the genotype (sum accoding to clouma)
count_genotype <- function(x){
temp <- apply(x, 2, sum)
return(c(sum(temp==0), sum(temp==1), sum(temp==2)))
}
# define the main function for generation drive simulation
sim_genetic_drive <- function(q0, d, t, N0, R0, M){
# check the input parameters
if(q0<=0 || q0 > 0.5){
stop('Please make sure 0<q0<0.5')
}
if(d<=0.5 || d>1){
stop('Please make sure 0.5<d<1')
}
pop <- list()
pop_siz <- rep(NA, t+1)
TG_freq <- rep(NA, t+1)
pop_siz[1] <- N0
TG_freq[1] <- q0
k <- ceiling(2*N0*q0)
pop[[1]] <- cbind(matrix(c(0,1), nrow = 2, ncol = k), matrix(c(0,0), nrow = 2, ncol = N0-k))
genotype <- count_genotype(pop[[1]])
for (i in 1:t) {
pop_siz[i+1] <- BH_model(N0, R0, M)
if(pop_siz==0){
print('Population clapse after generation', i)
return(population = pop, population_size = pop_siz, TG_freq = TG_freq)
}
if(genotype[2]+genotype[3] == 0){
print('TG group extinct after', i, 'generation')
return(population = pop, population_size = pop_siz, TG_freq = TG_freq)
}
gamete1_freq <- d*genotype[2]/(genotype[1]+genotype[2])
pop[[i+1]] <- matrix(
data = sample(x = 0:1, size = 2*pop_siz, replace = TRUE, prob = c(1-gamete1_freq, gamete1_freq)),
nrow = 2
)
genotype <- count_genotype(pop[[i+1]])
TG_freq <- (0.5*genotype[2] + genotype[3]) / pop_siz[i+1]
}
return(list(population = pop, population_size = pop_siz, TG_freq = TG_freq))
}
sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(data$TG_freq, data$pop_siz)
# do several simulations Q1
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
return(data$TG_freq, data$pop_siz)
}
# define the main function for generation drive simulation
sim_genetic_drive <- function(q0, d, t, N0, R0, M){
# check the input parameters
if(q0<=0 || q0 > 0.5){
stop('Please make sure 0<q0<0.5')
}
if(d<=0.5 || d>1){
stop('Please make sure 0.5<d<1')
}
pop <- list()
pop_siz <- rep(NA, t+1)
TG_freq <- rep(NA, t+1)
pop_siz[1] <- N0
TG_freq[1] <- q0
k <- ceiling(2*N0*q0)
pop[[1]] <- cbind(matrix(c(0,1), nrow = 2, ncol = k), matrix(c(0,0), nrow = 2, ncol = N0-k))
genotype <- count_genotype(pop[[1]])
for (i in 1:t) {
pop_siz[i+1] <- BH_model(N0, R0, M)
if(pop_siz==0){
print('Population clapse after generation', i)
return(population = pop, population_size = pop_siz, TG_freq = TG_freq)
}
if(genotype[2]+genotype[3] == 0){
print('TG group extinct after', i, 'generation')
return(population = pop, population_size = pop_siz, TG_freq = TG_freq)
}
gamete1_freq <- d*genotype[2]/(genotype[1]+genotype[2])
pop[[i+1]] <- matrix(
data = sample(x = 0:1, size = 2*pop_siz, replace = TRUE, prob = c(1-gamete1_freq, gamete1_freq)),
nrow = 2
)
genotype <- count_genotype(pop[[i+1]])
TG_freq[i+1] <- (0.5*genotype[2] + genotype[3]) / pop_siz[i+1]
}
return(list(population = pop, population_size = pop_siz, TG_freq = TG_freq))
}
sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
# do several simulations Q1
cl <- makeCluster(6)
registerDoParallel(cl)
result <- foreach(1:5000, .combine = 'rbind') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
return(c(data$TG_freq[51], data$pop_siz[51]))
}
stopCluster(cl)
result_q <- result[,1]
result_N <- result[,2]
result_q
result_N
result_N <- result[,2]
plot(result_N)
# do several simulations Q1
cl <- makeCluster(6)
registerDoParallel(cl)
result <- foreach(1:5000, .combine = 'rbind') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
# return the TG frequency and population size in last generation
return(c(data$TG_freq[51], data$pop_siz[51]))
}
stopCluster(cl)
result_q <- result[,1]
result_N <- result[,2]
plot(result_N)
# do several simulations Q1
cl <- makeCluster(6)
registerDoParallel(cl)
result <- foreach(1:5000, .combine = 'rbind') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
# return the TG frequency and population size in last generation
return(c(data$TG_freq[51], data$pop_siz[51]))
}
stopCluster(cl)
result_q <- result[,1]
#result_N <- result[,2]
plot(result_q)
result_N <- result[,2]
setwd("~/Documents/Term_2/Evolutionary_Model")
rm(list = ls())
graphics.off()
return(-2*N*(x0*log(x0)+(1-x0)*log(1-x0)) )
Time_fix <- function(x0, N){
return(-2*N*(x0*log(x0)+(1-x0)*log(1-x0)) )
}
Time_fix <- function(x0, N){
return(-2*N*(x0*log(x0)+(1-x0)*log(1-x0)) )
}
time2plot <- c()
for (i in 1:100) {
time2plot <- append(time2plot, Time_fix(i, 10))
}
a <- append(time2plot, 3)
a
Time_fix(2,3)
Time_fix(0.3,3)
time2plot <- c()
x0plot <- seq(0,1,0.01)
for (i in x0plot) {
time2plot <- append(time2plot, Time_fix(i, 10))
}
plot(time2plot, x0plot)
plot(x0plot, time2plot, pch = 19)
N2plot <- seq(100, 10^8, 10)
# x0 = 0.01
x_0.01 <- c()
for (i in N2plot) {
x_0.01 <- append(x_0.01, Time_fix(0.01, i))
}
# x0 =0.5
x_0.5 <- c()
for (i in N2plot) {
x_0.5 <- append(x_0.5, Time_fix(0.5, i))
}
# x0 = 0.1
x_0.1 <- c()
for (i in N2plot) {
x_0.1 <- append(x_0.1, Time_fix(0.1, i))
}
# plot
plot(N2plot, x_0.01, ces = 0.1, pch =19)
points(N2plot, x_0.01, pch = 19)
points(N2plot, x_0.1, pch = 19)
# Q2
N2plot <- seq(100, 10^8, 100)
# x0 = 0.01
x_0.01 <- c()
for (i in N2plot) {
x_0.01 <- append(x_0.01, Time_fix(0.01, i))
}
# Q2
N2plot <- seq(100, 10^8, 1000)
# x0 = 0.01
x_0.01 <- c()
for (i in N2plot) {
x_0.01 <- append(x_0.01, Time_fix(0.01, i))
}
# x0 = 0.1
x_0.1 <- c()
for (i in N2plot) {
x_0.1 <- append(x_0.1, Time_fix(0.1, i))
}
# x0 =0.5
x_0.5 <- c()
for (i in N2plot) {
x_0.5 <- append(x_0.5, Time_fix(0.5, i))
}
# plot
plot(N2plot, x_0.01, ces = 0.1, pch =19)
points(N2plot, x_0.1, pch = 19)
points(N2plot, x_0.5, pch = 19)
# plot
plot(N2plot, x_0.5, cex = 0.1, pch =19)
points(N2plot, x_0.1, cex = 0.1, pch = 19)
points(N2plot, x_0.01, cex = 0.1, pch = 19)
# Q3
tao <- function(N){
return(2*log(N))
}
Q3 <- c()
# Q3
tao <- function(N){
return(2*log(N))
}
Q3 <- c()
for (i in N2plot) {
Q3 <- Time_fix(x0 = 1/i, i)
}
plot(N2plot, Q3)
for (i in N2plot) {
Q3 <- append(Q3,Time_fix(x0 = 1/i, i))
}
plot(N2plot, Q3)
# Q3
tao <- function(N){
return(2*log(N))
}
Q3 <- c()
proxi <- c()
for (i in N2plot) {
Q3 <- append(Q3,Time_fix(x0 = 1/i, i))
proxi <- append(proxi, tao(i))
}
plot(N2plot, Q3, pch = 19, cex = 0.1)
points(N2plot, proxi, pch = 19, cex = 0.1)
